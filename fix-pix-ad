import cv2
import numpy as np

def find_and_fix_shape_advanced(image_path):
    # Read the image
    image = cv2.imread(image_path)
    output = image.copy()
    
    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Apply edge detection
    edges = cv2.Canny(gray, 50, 150, apertureSize=3)
    
    # Find contours
    contours, _ = cv2.findContours(edges, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    
    mask = np.zeros_like(gray)
    
    for contour in contours:
        # Approximate the contour
        epsilon = 0.02 * cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, epsilon, True)
        
        # Identify rectangular shapes (approximated contour with 4 points)
        if len(approx) == 4:
            # Draw the contour on the mask
            cv2.drawContours(mask, [approx], 0, 255, thickness=cv2.FILLED)
            
            # Extract the coordinates of the rectangle
            x, y, w, h = cv2.boundingRect(approx)
            
            # Define the region of interest (ROI)
            roi = image[y:y+h, x:x+w]
            mask_roi = mask[y:y+h, x:x+w]
            
            # Apply inpainting to the ROI
            fixed_roi = cv2.inpaint(roi, mask_roi, inpaintRadius=3, flags=cv2.INPAINT_TELEA)
            
            # Replace the original ROI with the inpainted ROI
            image[y:y+h, x:x+w] = fixed_roi
    
    # Save and display the output images
    cv2.imwrite('output_shapes_advanced.png', output)
    cv2.imwrite('fixed_shapes_advanced.png', image)
    cv2.imshow('Detected Shapes', output)
    cv2.imshow('Fixed Shapes', image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# Path to the image
image_path = 'path_to_your_image.png'
find_and_fix_shape_advanced(image_path)
