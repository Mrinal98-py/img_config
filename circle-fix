import cv2
import numpy as np

def find_and_fix_circle(image_path):
    # Read the image
    image = cv2.imread(image_path)
    output = image.copy()
    
    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Apply a blur to reduce noise
    gray_blurred = cv2.medianBlur(gray, 5)
    
    # Detect circles using Hough Circle Transform
    circles = cv2.HoughCircles(gray_blurred,
                               cv2.HOUGH_GRADIENT,
                               dp=1,
                               minDist=20,
                               param1=50,
                               param2=30,
                               minRadius=0,
                               maxRadius=0)
    
    # If circles are found
    if circles is not None:
        circles = np.uint16(np.around(circles))
        for circle in circles[0, :]:
            center = (circle[0], circle[1])
            radius = circle[2]
            
            # Draw the circle on the output image
            cv2.circle(output, center, radius, (0, 255, 0), 2)
            
            # Draw the center of the circle
            cv2.circle(output, center, 2, (0, 0, 255), 3)
            
            # Fixing the broken circle by drawing it again
            cv2.circle(image, center, radius, (255, 255, 255), -1)  # Fill the circle with white
            cv2.circle(image, center, radius, (0, 0, 0), 2)  # Outline the circle with black

    # Save and display the output image
    cv2.imwrite('output.png', output)
    cv2.imwrite('fixed_circle.png', image)
    cv2.imshow('Detected Circle', output)
    cv2.imshow('Fixed Circle', image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# Path to the image
image_path = 'path_to_your_image.png'
find_and_fix_circle(image_path)
