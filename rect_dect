import cv2
import numpy as np
import matplotlib.pyplot as plt

# Function to detect rectangles in an image
def detect_rectangles(image, num_rectangles=2):
    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Apply GaussianBlur to reduce noise and improve contour detection
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    
    # Threshold the image to get a binary image
    _, binary = cv2.threshold(blurred, 128, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
    
    # Find contours in the binary image
    contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Filter the contours to find rectangles
    rectangles = []
    for cnt in contours:
        approx = cv2.approxPolyDP(cnt, 0.02 * cv2.arcLength(cnt, True), True)
        if len(approx) == 4:  # Contour with 4 vertices is a rectangle
            rectangles.append(approx)
    
    # Sort rectangles by area (largest to smallest) and take the top num_rectangles
    rectangles = sorted(rectangles, key=cv2.contourArea, reverse=True)[:num_rectangles]
    
    return rectangles

# Load an example image
img_path = 'path_to_your_image.png'
image = cv2.imread(img_path)

# Check if the image was loaded properly
if image is None:
    print("Error: Unable to load image. Please check the image path or URL.")
else:
    # Detect rectangles in the image
    rectangles = detect_rectangles(image)
    
    # Draw the detected rectangles on the image
    for rect in rectangles:
        cv2.drawContours(image, [rect], -1, (0, 255, 0), 3)
    
    # Display the results
    plt.figure(figsize=(10, 10))
    plt.title('Detected Rectangles')
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.axis('off')
    plt.show()
